/**
 Modern 12 column grid system based on flex property.

 Inspired by https://github.com/SaraVieira/Flexy
*/

@cols: 12;
@gutter: 8px;
@container-width: 100%;

@xs: ~"only screen and (min-width: 300px)";
@sm: ~"only screen and (min-width: 576px)";
@md: ~"only screen and (min-width: 768px)";
@lg: ~"only screen and (min-width: 1024px)";
@xl: ~"only screen and (min-width: 1200px)";

// Loops for spaces and padding
.for(@list, @code) {
  & {
    .loop(@i:1) when (@i =< length(@list)) {
      @value: extract(@list, @i);
      @code();
      .loop(@i + 1);
    }
    .loop();
  }
}

// Loop for responsive breakpoints
.generateResponsiveCols(@counter, @media) when (@counter > 0) {
  @width: (@counter / @cols) * 100;
  .col-@{media}-@{counter} {
    flex-basis: ~"@{width}%";
    max-width: ~"@{width}%";
  }

  .col-offset-@{media}-@{counter} {
    margin-left: ~"@{width}%";
  }
  .generateResponsiveCols((@counter - 1), @media);
}

// Loop for normal cols
.generateCols(@counter) when (@counter > 0) {
  @width: (@counter / @cols) * 100;
  .col-@{counter} {
    flex-basis: ~"@{width}%";
    max-width: ~"@{width}%";
  }

  .col-offset-@{counter} {
    margin-left: ~"@{width}%";
  }
  .generateCols(@counter - 1);
}

.container {
  width: @container-width;
  display: block;
  margin: auto;

  .row,
  .column {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-wrap: wrap;
    margin: @gutter;

    &.no-wrap {
      flex-wrap: nowrap;
    }

    [class^="col-"] {
      box-sizing: border-box;
      flex-grow: 0;
      flex-shrink: 0;
      padding-right: @gutter / 2;
      padding-left: @gutter / 2;
    }

    .generateCols(@cols);

    .col-sm-hidden,
    .col-md-hidden,
    .col-lg-hidden,
    .col-xl-hidden {
      display: flex;
    }

    .col-hidden {
      display: none;
    }

    @media @xs {
      .generateResponsiveCols(@cols, xs);

      .col-sm-hidden,
      .col-md-hidden,
      .col-lg-hidden,
      .col-xl-hidden,
      .col-hidden {
        display: flex;
      }

      .col-xs-hidden {
        display: none;
      }
    }

    @media @sm {
      .generateResponsiveCols(@cols, sm);

      .col-xs-hidden,
      .col-md-hidden,
      .col-lg-hidden,
      .col-xl-hidden,
      .col-hidden {
        display: flex;
      }

      .col-sm-hidden {
        display: none;
      }
    }

    @media @md {
      .generateResponsiveCols(@cols, md);

      .col-sm-hidden,
      .col-lg-hidden,
      .col-xl-hidden,
      .col-hidden {
        display: flex;
      }

      .col-md-hidden {
        display: none;
      }
    }

    @media @lg {
      .generateResponsiveCols(@cols, lg);

      .col-xs-hidden,
      .col-sm-hidden,
      .col-md-hidden,
      .col-xl-hidden,
      .col-hidden {
        display: flex;
      }

      .col-lg-hidden {
        display: none;
      }
    }

    @media @xl {
      .generateResponsiveCols(@cols, xl);

      .col-xs-hidden,
      .col-sm-hidden,
      .col-md-hidden,
      .col-lg-hidden,
      .col-hidden {
        display: flex;
      }

      .col-xl-hidden {
        display: none;
      }
    }
  }

  .row {
    flex-direction: row;

    &.reverse {
      flex-direction: row-reverse;
    }
  }

  .column {
    flex-direction: column;

    &.reverse {
      flex-direction: column-reverse;
    }
  }

  [class*="items-"],
  [class*="justify-"] {
    display: flex;
  }

  .items-center {
    align-items: center;
  }

  .items-start {
    align-items: flex-start;
  }

  .items-end {
    align-items: flex-end;
  }

  .items-stretch {
    align-items: stretch;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-end {
    justify-content: flex-end;
  }

  .justify-start {
    justify-content: flex-start;
  }

  .justify-around {
    justify-content: space-around;
  }

  .justify-between {
    justify-content: space-between;
  }
}
