/**
 Modern 12 column grid system based on flex property.

 Inspired by https://github.com/SaraVieira/Flexy
*/

@cols: 12;
@gutter: 8px;
@container-width: 100%;

// Break points
@breakpoints: {
  xs: ~"only screen and (min-width: 300px)"; // extra small and global
  sm: ~"only screen and (min-width: 576px)"; // mobile
  md: ~"only screen and (min-width: 768px)"; // tablet
  lg: ~"only screen and (min-width: 1024px)"; // desktop
  xl: ~"only screen and (min-width: 1200px)"; // large screen
}

// Loop for responsive breakpoints
.generateResponsiveCols(@counter, @media) when (@counter > 0) {
  @width: (@counter / @cols) * 100;
  .col-@{media}-@{counter} {
    flex-basis: ~"@{width}%";
    max-width: ~"@{width}%";
  }

  .col-offset-@{media}-@{counter} {
    margin-left: ~"@{width}%";
  }
  .generateResponsiveCols((@counter - 1), @media);
}

// Loop for normal cols
.generateCols(@counter) when (@counter > 0) {
  @width: (@counter / @cols) * 100;
  .col-@{counter} {
    flex-basis: ~"@{width}%";
    max-width: ~"@{width}%";
  }

  .col-offset-@{counter} {
    margin-left: ~"@{width}%";
  }
  .generateCols(@counter - 1);
}

.generateSpacingWithBreakpoint(@counter, @media) when (@counter >= 0) {
  @width: @counter * 4;
  @sides: {
    l: left;
    r: right;
    t: top;
    b: bottom;
  }

  each(@sides, {
    .p@{key}-@{media}-@{counter} {
      padding-@{value}: ~"@{width}px";
    }
    .m@{key}-@{media}-@{counter} {
      margin-@{value}: ~"@{width}px";
    }
  });
  .pa-@{media}-@{counter} {
    padding: ~"@{width}px";
  }
  .ma-@{media}-@{counter} {
    margin: ~"@{width}px";
  }
  .generateSpacing(@counter - 1);
}

.generateSpacing(@counter) when (@counter >= 0) {
  @width: @counter * 4;
  @sides: {
    l: left;
    r: right;
    t: top;
    b: bottom;
  }

  each(@sides, {
    .p@{key}-@{counter} {
      padding-@{value}: ~"@{width}px";
    }
    .m@{key}-@{counter} {
      margin-@{value}: ~"@{width}px";
    }
  });
  .pa-@{counter} {
    padding: ~"@{width}px";
  }
  .ma-@{counter} {
    margin: ~"@{width}px";
  }
  .generateSpacing(@counter - 1);
}

.container {
  width: @container-width;
  display: block;
  margin: auto;

  .row,
  .column {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-wrap: wrap;
    margin: @gutter;

    &.no-wrap {
      flex-wrap: nowrap;
    }

    [class^="col-"] {
      box-sizing: border-box;
      flex-grow: 0;
      flex-shrink: 0;
      padding-right: @gutter / 2;
      padding-left: @gutter / 2;
    }

    .generateCols(@cols);
    .generateSpacing(@cols);

    each(@breakpoints, {
          .col-@{value}-hidden {
            display: flex;
          }
        });

    .col-xs-hidden,
    .col-hidden {
      display: none;
    }

    each(@breakpoints, {
      @media @value {
        .generateResponsiveCols(@cols, @key);
        .generateSpacingWithBreakpoint(@cols, @key);

        each(@breakpoints, {
          .col-@{value}-hidden {
            display: flex;
          }
        });

        .col-hidden {
          display: flex;
        }
        .col-@{value}-hidden {
          display: none;
        }
      }
    })
  }

  .row {
    flex-direction: row;

    &.reverse {
      flex-direction: row-reverse;
    }
  }

  .column {
    flex-direction: column;

    &.reverse {
      flex-direction: column-reverse;
    }
  }

  [class*="items-"],
  [class*="justify-"] {
    display: flex;
  }

  .items-center {
    align-items: center;
  }

  .items-start {
    align-items: flex-start;
  }

  .items-end {
    align-items: flex-end;
  }

  .items-stretch {
    align-items: stretch;
  }

  .justify-center {
    justify-content: center;
  }

  .justify-end {
    justify-content: flex-end;
  }

  .justify-start {
    justify-content: flex-start;
  }

  .justify-around {
    justify-content: space-around;
  }

  .justify-between {
    justify-content: space-between;
  }
}
